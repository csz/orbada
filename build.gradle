apply plugin: 'java'
apply plugin: "maven"

compileJava.options.encoding = 'ISO-8859-1'
sourceCompatibility = 1.6
targetCompatibility = 1.6


group = "orbada"
version = "1.2.4"

//jar {
//	manifest {
//		attributes 'Main-Class': 'com.mageddo.test.jmxhelloworld.bean.SimpleAgent'
//	}

//	println(sourceSets.main.resources.)

//	exclude "src/main/resources/**"

//	from files(sourceSets.main.output.classesDir){
//		println("x=" + Arrays.toString(sourceSets.main.output.classesDir.list()))


//		def iterable = sourceSets.main.output.resourcesDir;
//		ite
//		String[] files = new String[iterable.size()];
////		iterable.toList().toArray(new File[]);
//		int i=0;
//		iterable.each {
//			println("${it}")
//			files[i++] = it.absolutePath;
//		};
//
//		exclude files
//	}
//	from {
//		configurations.compile.collect {
//			it.isDirectory() ? it : fileTree(it)
//		}
//	}
//}

task tmp(type: Copy){
	doFirst{
		println("builded")
	}
	doLast{
		println("builded")
	}
}

/**
 * generate the binary distribution file
 */
build.doLast {

	/**
	 * generate jar with only compiled sources
	 * (the default comes with resources)
	 */
	ant.jar(
		destfile: jar.archivePath,
		"keepcompression": "true"
	) {
		zipfileset("dir": sourceSets.main.output.classesDir)
	}

	/**
	 * the distribution zip file
	 */
	ant.zip(destfile: "${jar.archivePath}".replace(".jar", ".zip")){

		// get the generated jar above and put inside
		fileset("file": jar.archivePath)

		// adding resouces
		zipfileset("dir": sourceSets.main.output.resourcesDir)

		// adding dependencies
		configurations.compile.collect {
			zipfileset("file": it.absolutePath, fullpath: "lib/${it.name}")
		}
	}
}

//    repositories {
//        mavenCentral()
//        mavenLocal()
//        maven {
//            url uri("${rootProject.projectDir}/libs/maven")
//        }
//
//    }

dependencies {
	compile fileTree("${rootProject.projectDir}/lib/")
	compile fileTree("${rootProject.projectDir}/tools/")
	compile fileTree("${rootProject.projectDir}/plugins/")
}