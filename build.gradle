apply plugin: "maven"

group = "orbada"
version = "1.2.4"


allprojects {
    apply plugin: 'java'
    compileJava.options.encoding = 'ISO-8859-1'
    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url uri("${rootProject.projectDir}/libs/maven")
        }

    }
    dependencies {

        // external dependencies
        compile group: 'org.beanshell', name: 'bsh', version: '2.0b4'
        compile group: 'dom4j', name: 'dom4j', version: '1.6.1'
        compile group: 'com.lowagie', name: 'itext', version: '2.1.3'
        compile group: 'com.linuxense', name: 'javadbf', version: '0.4.0'
//        compile group: 'org.jmeld', name: 'jmeld', version: '2.1'
        compile group: 'org.firebirdsql.jdbc', name: 'jaybird', version: '2.1.6'
        compile group: 'log4j', name: 'log4j', version: '1.2.17'
        compile group: 'net.sf.nimrod', name: 'nimrod-laf', version: '1.2'
        compile group: 'org.apache.poi', name: 'poi', version: '3.13'
        compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.13'
        compile group: 'net.sf.squirrel-sql.thirdparty-non-maven', name: 'tinylaf', version: '1.4.0'
        compile group: 'com.jgoodies', name: 'looks', version: '2.1.4'

        compile fileTree("${rootProject.projectDir}/libs/bin/")


        if(!project.name.equals("orbada-res")){
            // adding res module to all modules but not for yourself
            compile project(':orbada-res')
        }
    }
}

dependencies {
    compile project(':drink-master')
    compile project(':json')
    compile project(':orbada-core')
    compile project(':orbada-datatext')
    compile project(':orbada-db-objects')
    compile project(':orbada-g2')
    compile project(':orbada-id')
    compile project(':orbada-parser')
    compile project(':orbada-plugins')
    compile project(':orbada-prop')
    compile project(':orbada-reports-db')
//    compile project(':orbada-res')
    compile project(':orbada-sky')
    compile project(':orbada-task')
    compile project(':orbada-userdb')
    compile project(':orbada-util')
    compile project(':orbada-waitdlg')
//    compile project(':startup')
}

gradle.buildFinished {
    print('>>>> end')


    ant.copy(
        todir: sourceSets.main.output.resourcesDir
    ){
        fileset(dir: project(":orbada-res").sourceSets.main.output.resourcesDir)
    }

    /**
     * the distribution zip file
     */
    ant.zip(destfile: "${jar.archivePath}".replace(".jar", ".zip")){

        def starterJar = project(":startup").jar;

        // the starter jar
        zipfileset("file": starterJar.archivePath, fullpath: "${starterJar.baseName}.jar")

        zipfileset("dir": sourceSets.main.output.resourcesDir)
//        subprojects.forEach({ it
//            // adding resources
//            if(it.sourceSets.main.output.resourcesDir.exists() && !it.path.startsWith(":plugin")){
//                println("processing ${it} resources")
//                zipfileset("dir": it.sourceSets.main.output.resourcesDir)
//            }
//        })

        // adding dependencies
        configurations.compile.collect {
            zipfileset("file": it.absolutePath, fullpath: "lib/${it.name}"){
                patternset {
                    exclude("name": "**/orbada-res*")
                }
            }
        }
    }


}