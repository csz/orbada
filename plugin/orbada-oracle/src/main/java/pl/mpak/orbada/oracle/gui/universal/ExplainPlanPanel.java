/*
 * ExplainPlanPanel.java
 *
 * Created on 28 luty 2008, 19:22
 */
package pl.mpak.orbada.oracle.gui.universal;

import java.io.IOException;
import java.util.Enumeration;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import pl.mpak.orbada.oracle.OrbadaOraclePlugin;
import pl.mpak.orbada.oracle.Sql;
import pl.mpak.sky.gui.mr.ModalResult;
import pl.mpak.sky.gui.swing.MessageBox;
import pl.mpak.usedb.core.Command;
import pl.mpak.usedb.core.Database;
import pl.mpak.usedb.core.Query;
import pl.mpak.util.ExceptionUtil;
import pl.mpak.util.StringManager;
import pl.mpak.util.StringManagerFactory;
import pl.mpak.util.patt.Resolvers;

/**
 *
 * @author  akaluza
 */
public class ExplainPlanPanel extends javax.swing.JPanel {

  private final StringManager stringManager = StringManagerFactory.getStringManager("oracle");

  private Database database;

  /** Creates new form ExplainPlanPanel */
  public ExplainPlanPanel(Database database, String sqlText) {
    this.database = database;
    initComponents();
    init();
    updatePlan(sqlText);
  }

  private void init() {
    treePlan.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  }

  private void expandAll(JTree tree, TreePath parent, boolean expand) {
    TreeNode node = (TreeNode) parent.getLastPathComponent();
    if (node.getChildCount() >= 0) {
      for (Enumeration e = node.children(); e.hasMoreElements();) {
        TreeNode n = (TreeNode) e.nextElement();
        TreePath path = parent.pathByAddingChild(n);
        expandAll(tree, path, expand);
      }
    }
    if (expand) {
      tree.expandPath(parent);
    } else {
      tree.collapsePath(parent);
    }
  }

  private void fillTree(Query query, DefaultMutableTreeNode node) {
    try {
      if (query.eof()) {
        return;
      }
      long firstLevel = query.fieldByName("level").getLong();
      DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(query.fieldByName("plan_output").getString());
      node.add(newNode);
      query.next();
      while (!query.eof()) {
        if (query.fieldByName("level").getLong() > firstLevel) {
          fillTree(query, newNode);
        } else if (query.fieldByName("level").getLong() < firstLevel) {
          break;
        } else {
          newNode = new DefaultMutableTreeNode(query.fieldByName("plan_output").getString());
          node.add(newNode);
          query.next();
        }
      }
    } catch (Exception ex) {
      ExceptionUtil.processException(ex);
    }
  }
  
  public void updatePlan(String sqlText) {
    String id = Resolvers.expand("$(user.name)/$(orbada.current.date)/$(orbada.current.time)");
    if (id.length() > 30) {
      id = id.substring(0, 29);
    }
    Command command = database.createCommand();
    try {
      command.setParamCheck(false);
      command.execute("explain plan set statement_id = '" + id + "' into plan_table for\n" + sqlText);
      Query query = database.createQuery();
      try {
        query.setSqlText(Sql.getExplainPlan());
        query.paramByName("statement_id").setString(id);
        query.open();
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("root");
        fillTree(query, root);
        treePlan.setModel(new DefaultTreeModel(root));
        if (root.getChildCount() > 0) {
          treePlan.setSelectionInterval(0, 0);
        }
        expandAll(treePlan, new TreePath(root), true);
        textPlan.setText("");
        try {
          query.setSqlText(Sql.getExplainXPlan());
          query.paramByName("statement_id").setString(id);
          query.open();
          while (!query.eof()) {
            textPlan.append(query.fieldByName("plan_table_output").getString() +"\n");
            query.next();
          }
        }
        catch (Exception ex) {
          textPlan.append(stringManager.getString("ExplainPlanPanel-dbms-xplan-error-info") +"\n" +ex.getMessage());
        }
      } finally {
        query.close();
      }
      database.executeCommand("delete from plan_table where statement_id = '" + id + "'");
    } catch (Exception ex) {
      MessageBox.show(this, stringManager.getString("error"), ex.getMessage(), ModalResult.OK, MessageBox.ERROR);
    }
  }

  public void close() throws IOException {
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jTabbedPane1 = new javax.swing.JTabbedPane();
    jScrollPane1 = new javax.swing.JScrollPane();
    treePlan = new javax.swing.JTree();
    jScrollPane2 = new javax.swing.JScrollPane();
    textPlan = new pl.mpak.sky.gui.swing.comp.TextArea();

    setLayout(new java.awt.BorderLayout());

    jTabbedPane1.setFocusable(false);

    treePlan.setModel(null);
    treePlan.setRootVisible(false);
    treePlan.setRowHeight(18);
    treePlan.setShowsRootHandles(true);
    jScrollPane1.setViewportView(treePlan);

    jTabbedPane1.addTab(stringManager.getString("ExplainPlanPanel-tree"), jScrollPane1); // NOI18N

    textPlan.setColumns(20);
    textPlan.setEditable(false);
    textPlan.setRows(5);
    textPlan.setFont(new java.awt.Font("Courier New", 0, 12));
    jScrollPane2.setViewportView(textPlan);

    jTabbedPane1.addTab(stringManager.getString("ExplainPlanPanel-details"), jScrollPane2); // NOI18N

    add(jTabbedPane1, java.awt.BorderLayout.CENTER);
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JTabbedPane jTabbedPane1;
  private pl.mpak.sky.gui.swing.comp.TextArea textPlan;
  private javax.swing.JTree treePlan;
  // End of variables declaration//GEN-END:variables
}
