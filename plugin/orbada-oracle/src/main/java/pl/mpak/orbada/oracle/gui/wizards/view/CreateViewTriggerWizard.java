package pl.mpak.orbada.oracle.gui.wizards.view;

import java.util.HashMap;
import pl.mpak.orbada.core.Application;
import pl.mpak.orbada.db.Template;
import pl.mpak.orbada.oracle.OrbadaOraclePlugin;
import pl.mpak.orbada.oracle.dbinfo.OracleViewInfo;
import pl.mpak.orbada.oracle.gui.util.ViewComboBoxModel;
import pl.mpak.orbada.oracle.gui.util.ViewItemListener;
import pl.mpak.orbada.oracle.services.OracleTemplatesSettingsProvider;
import pl.mpak.orbada.plugins.ISettings;
import pl.mpak.orbada.universal.gui.wizards.SqlCodeWizardPanel;
import pl.mpak.sky.gui.mr.ModalResult;
import pl.mpak.sky.gui.swing.MessageBox;
import pl.mpak.usedb.core.Database;
import pl.mpak.usedb.util.SQLUtil;
import pl.mpak.util.StringManager;
import pl.mpak.util.StringManagerFactory;
import pl.mpak.util.StringUtil;

/**
 *
 * @author  akaluza
 */
public class CreateViewTriggerWizard extends SqlCodeWizardPanel {

  private final StringManager stringManager = StringManagerFactory.getStringManager("oracle");

  private Database database;
  private String schemaName;
  private String viewName;
  private boolean nameChanged = false;
  private Template template;

  public CreateViewTriggerWizard(Database database, String schemaName, String viewName) {
    this.database = database;
    this.schemaName = schemaName;
    this.viewName = viewName;
    initComponents();
    init();
  }

  private void init() {
    comboTables.setModel(new ViewComboBoxModel(database));
    comboTables.addItemListener(new ViewItemListener() {
      public void itemChanged(OracleViewInfo info) {
        if (!nameChanged) {
          updateName();
        }
      }
    });
  }

  public void wizardShow() {
    ISettings oracle = Application.get().getSettings(OracleTemplatesSettingsProvider.settingsName);
    template = new Template(Application.get().getOrbadaDatabase()).loadByName(oracle.getValue(OracleTemplatesSettingsProvider.setTrigger, "oracle-trigger"));

    ((ViewComboBoxModel) comboTables.getModel()).change(schemaName);
    ((ViewComboBoxModel)comboTables.getModel()).select(viewName, comboTables);
  }
  
  private void updateName() {
    String idu = "";
    if (checkInsert.isSelected()) {
      idu = idu +"_NEW";
    }
    if (checkDelete.isSelected()) {
      idu = idu +"_DEL";
    }
    if (checkUpdate.isSelected()) {
      idu = idu +"_UPD";
    }
    textName.setText(comboTables.getSelectedItem().toString() +idu +"_TRG");
  }

  public String getDialogTitle() {
    return stringManager.getString("CreateViewTriggerWizard-dialog-title");
  }

  public String getTabTitle() {
    return stringManager.getString("CreateViewTriggerWizard-tab-title");
  }

  public String getSqlCode() {
    getResultMap().put("object_name", textName.getText());
    String idu = "";
    if (checkInsert.isSelected()) {
      idu = idu +" INSERT";
    }
    if (checkDelete.isSelected()) {
      if (!StringUtil.isEmpty(idu)) {
        idu = idu +" OR";
      }
      idu = idu +" DELETE";
    }
    if (checkDelete.isSelected()) {
      if (!StringUtil.isEmpty(idu)) {
        idu = idu +" OR";
      }
      idu = idu +" UPDATE";
    }
    idu = idu +" ON " +SQLUtil.createSqlName(schemaName, comboTables.getSelectedItem().toString());
    String ref = "";
    if (!StringUtil.isEmpty(textOldRef.getText())) {
      ref = ref +" OLD AS " +textOldRef.getText();
    }
    if (!StringUtil.isEmpty(textNewRef.getText())) {
      ref = ref +" NEW AS " +textNewRef.getText();
    }
    String type =
      "  INSTEAD OF" +idu +
      (!StringUtil.isEmpty(ref) ? "\n  REFERENCING" +ref : "");
    if (template == null) {
      return
        "CREATE TRIGGER " +textName.getText() +"\n" +
        type +
        "\nBEGIN\n" +
        "  NULL;\n" +
        "END;";
    }
    else {
      HashMap<String, String> map = new HashMap<String, String>();
      map.put("&name", textName.getText());
      map.put("&type", type);
      map.put("&body", "  NULL;");
      map.put("&description", "");
      return template.expand(map);
    }
  }

  public boolean execute() {
    try {
      database.executeCommand(getSqlCode());
      return true;
    } catch (Exception ex) {
      MessageBox.show(this, stringManager.getString("error"), ex.getMessage(), ModalResult.OK, MessageBox.ERROR);
      return false;
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel2 = new javax.swing.JLabel();
    comboTables = new javax.swing.JComboBox();
    jLabel3 = new javax.swing.JLabel();
    textName = new pl.mpak.sky.gui.swing.comp.TextField();
    checkInsert = new javax.swing.JCheckBox();
    checkDelete = new javax.swing.JCheckBox();
    checkUpdate = new javax.swing.JCheckBox();
    jLabel6 = new javax.swing.JLabel();
    textNewRef = new pl.mpak.sky.gui.swing.comp.TextField();
    jLabel7 = new javax.swing.JLabel();
    textOldRef = new pl.mpak.sky.gui.swing.comp.TextField();

    jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel2.setText(stringManager.getString("view-dd")); // NOI18N

    jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel3.setText(stringManager.getString("trigger-name-dd")); // NOI18N

    textName.setText("_TRG");
    textName.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        textNameKeyPressed(evt);
      }
    });

    checkInsert.setText(stringManager.getString("inserting")); // NOI18N
    checkInsert.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        checkInsertStateChanged(evt);
      }
    });

    checkDelete.setText(stringManager.getString("deleting")); // NOI18N
    checkDelete.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        checkDeleteStateChanged(evt);
      }
    });

    checkUpdate.setText(stringManager.getString("updating")); // NOI18N
    checkUpdate.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        checkUpdateStateChanged(evt);
      }
    });

    jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel6.setText(stringManager.getString("reference-new-dd")); // NOI18N

    jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel7.setText(stringManager.getString("reference-old-dd")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(textOldRef, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(textNewRef, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addGap(131, 131, 131)
            .addComponent(checkInsert)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(checkDelete)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(checkUpdate))
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(textName, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(comboTables, 0, 273, Short.MAX_VALUE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(comboTables, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(checkInsert)
          .addComponent(checkDelete)
          .addComponent(checkUpdate))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel6)
          .addComponent(textNewRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel7)
          .addComponent(textOldRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents
  private void textNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textNameKeyPressed
    nameChanged = true;
  }//GEN-LAST:event_textNameKeyPressed

  private void checkInsertStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_checkInsertStateChanged
    if (!nameChanged) {
      updateName();
    }
  }//GEN-LAST:event_checkInsertStateChanged

  private void checkDeleteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_checkDeleteStateChanged
    if (!nameChanged) {
      updateName();
    }
  }//GEN-LAST:event_checkDeleteStateChanged

  private void checkUpdateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_checkUpdateStateChanged
    if (!nameChanged) {
      updateName();
    }
  }//GEN-LAST:event_checkUpdateStateChanged

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox checkDelete;
  private javax.swing.JCheckBox checkInsert;
  private javax.swing.JCheckBox checkUpdate;
  private javax.swing.JComboBox comboTables;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private pl.mpak.sky.gui.swing.comp.TextField textName;
  private pl.mpak.sky.gui.swing.comp.TextField textNewRef;
  private pl.mpak.sky.gui.swing.comp.TextField textOldRef;
  // End of variables declaration//GEN-END:variables
}
