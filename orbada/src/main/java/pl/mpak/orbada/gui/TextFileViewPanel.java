/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TextFileViewPanel.java
 *
 * Created on 2009-03-29, 20:11:34
 */
package orbada.gui;

import java.io.File;
import java.io.IOException;

import orbada.Consts;
import orbada.gui.editor.EditorPopupMenu;
import pl.mpak.orbada.plugins.IViewAccesibilities;
import pl.mpak.sky.gui.mr.ModalResult;
import pl.mpak.sky.gui.swing.MessageBox;
import pl.mpak.util.StringManager;
import pl.mpak.util.StringManagerFactory;

/**
 *
 * @author akaluza
 */
public class TextFileViewPanel extends javax.swing.JPanel {

  private final static StringManager stringManager = StringManagerFactory.getStringManager(Consts.class);

  private IViewAccesibilities accesibilities;
  private File file;

  /** Creates new form TextFileViewPanel */
  public TextFileViewPanel(IViewAccesibilities accesibilities, File file) {
    this.accesibilities = accesibilities;
    this.file = file;
    initComponents();
    init();
  }

  private void init() {
    textContent.getEditorArea().setComponentPopupMenu(new EditorPopupMenu(textContent));
    try {
      textContent.loadFromFile(file);
      textContent.setChanged(false);
      textContent.getEditorArea().getUndoManager().discardAllEdits();
    } catch (IOException ex) {
      MessageBox.show(this, stringManager.getString("error"), ex.getMessage(), ModalResult.OK, MessageBox.ERROR);
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    cmSave = new pl.mpak.sky.gui.swing.Action();
    jPanel1 = new javax.swing.JPanel();
    jToolBar1 = new javax.swing.JToolBar();
    toolButton1 = new pl.mpak.sky.gui.swing.comp.ToolButton();
    textContent = new pl.mpak.sky.gui.swing.syntax.SyntaxTextArea();

    cmSave.setActionCommandKey("cmSave");
    cmSave.setSmallIcon(pl.mpak.sky.gui.swing.ImageManager.getImage("/pl/mpak/res/icons/save16.gif")); // NOI18N
    cmSave.setText(stringManager.getString("cmSave-text")); // NOI18N
    cmSave.setTooltip(stringManager.getString("TextFileViewPanel-cmSave-hint")); // NOI18N
    cmSave.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cmSaveActionPerformed(evt);
      }
    });

    setLayout(new java.awt.BorderLayout());

    jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

    jToolBar1.setFloatable(false);
    jToolBar1.setRollover(true);

    toolButton1.setAction(cmSave);
    toolButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    toolButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jToolBar1.add(toolButton1);

    jPanel1.add(jToolBar1);

    add(jPanel1, java.awt.BorderLayout.PAGE_START);
    add(textContent, java.awt.BorderLayout.CENTER);
  }// </editor-fold>//GEN-END:initComponents

  private void cmSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmSaveActionPerformed
    try {
      textContent.saveToFile(file);
      textContent.setChanged(false);
    } catch (IOException ex) {
      MessageBox.show(this, stringManager.getString("error"), ex.getMessage(), ModalResult.OK, MessageBox.ERROR);
    }
  }//GEN-LAST:event_cmSaveActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private pl.mpak.sky.gui.swing.Action cmSave;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JToolBar jToolBar1;
  private pl.mpak.sky.gui.swing.syntax.SyntaxTextArea textContent;
  private pl.mpak.sky.gui.swing.comp.ToolButton toolButton1;
  // End of variables declaration//GEN-END:variables
}
