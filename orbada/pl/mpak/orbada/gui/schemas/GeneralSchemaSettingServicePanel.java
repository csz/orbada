/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GeneralSchemaSettingServicePanel.java
 *
 * Created on 2011-06-04, 17:29:43
 */

package pl.mpak.orbada.gui.schemas;

import pl.mpak.orbada.Consts;
import pl.mpak.orbada.core.Application;
import pl.mpak.orbada.plugins.ISettings;
import pl.mpak.orbada.plugins.ISettingsComponent;
import pl.mpak.util.StringManager;
import pl.mpak.util.StringManagerFactory;

/**
 *
 * @author akaluza
 */
public class GeneralSchemaSettingServicePanel extends javax.swing.JPanel implements ISettingsComponent {

  private final StringManager stringManager = StringManagerFactory.getStringManager(Consts.class);

  private String schemaId;
  private ISettings settings;

  /** Creates new form GeneralSchemaSettingServicePanel */
  public GeneralSchemaSettingServicePanel(String schemaId) {
    this.schemaId = schemaId;
    initComponents();
    init();
  }

  private void init() {
    settings = Application.get().getSettings(schemaId, Consts.orbadaSettings);
    restoreSettings();
  }

  private void enableControls() {
    checkDisableLoadSqlSyntaxInfo.setEnabled(!checkUseGlobalSettingsDisableLoadSqlSyntaxInfo.isSelected());
  }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    checkUseGlobalSettingsDisableLoadSqlSyntaxInfo = new javax.swing.JCheckBox();
    checkDisableLoadSqlSyntaxInfo = new javax.swing.JCheckBox();

    checkUseGlobalSettingsDisableLoadSqlSyntaxInfo.setText(stringManager.getString("useGlobalSettings-text")); // NOI18N
    checkUseGlobalSettingsDisableLoadSqlSyntaxInfo.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        checkUseGlobalSettingsDisableLoadSqlSyntaxInfoItemStateChanged(evt);
      }
    });

    checkDisableLoadSqlSyntaxInfo.setText(stringManager.getString("OrbadaSettingsDialog-checkDisableLoadSqlSyntaxInfo-text")); // NOI18N
    checkDisableLoadSqlSyntaxInfo.setToolTipText(stringManager.getString("OrbadaSettingsDialog-checkDisableLoadSqlSyntaxInfo-hint")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGap(21, 21, 21)
            .addComponent(checkDisableLoadSqlSyntaxInfo))
          .addComponent(checkUseGlobalSettingsDisableLoadSqlSyntaxInfo))
        .addContainerGap(75, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(checkUseGlobalSettingsDisableLoadSqlSyntaxInfo)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(checkDisableLoadSqlSyntaxInfo)
        .addContainerGap(296, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

    private void checkUseGlobalSettingsDisableLoadSqlSyntaxInfoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkUseGlobalSettingsDisableLoadSqlSyntaxInfoItemStateChanged
      enableControls();
}//GEN-LAST:event_checkUseGlobalSettingsDisableLoadSqlSyntaxInfoItemStateChanged

  @Override
  public void restoreSettings() {
    checkUseGlobalSettingsDisableLoadSqlSyntaxInfo.setSelected(settings.getValue(Consts.useGlobalSettingsDisableLoadSqlSyntaxInfo, true));
    checkDisableLoadSqlSyntaxInfo.setSelected(settings.getValue(Consts.disableLoadSqlSyntaxInfo, false));
    enableControls();
  }

  @Override
  public void applySettings() {
    settings.setValue(Consts.useGlobalSettingsDisableLoadSqlSyntaxInfo, checkUseGlobalSettingsDisableLoadSqlSyntaxInfo.isSelected());
    settings.setValue(Consts.disableLoadSqlSyntaxInfo, checkDisableLoadSqlSyntaxInfo.isSelected());
    settings.store();
  }

  @Override
  public void cancelSettings() {
    restoreSettings();
  }


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox checkDisableLoadSqlSyntaxInfo;
  private javax.swing.JCheckBox checkUseGlobalSettingsDisableLoadSqlSyntaxInfo;
  // End of variables declaration//GEN-END:variables

}
