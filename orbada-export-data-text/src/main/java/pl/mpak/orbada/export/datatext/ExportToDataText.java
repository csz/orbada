/*
 * ExportToDbf.java
 *
 * Created on 2008-10-26, 18:04:29
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */
package pl.mpak.orbada.export.datatext;

import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.swing.JTable;
import pl.mpak.datatext.sax.DataTextColumn;
import pl.mpak.datatext.sax.DataTextWriter;
import pl.mpak.orbada.plugins.ISettings;
import pl.mpak.orbada.plugins.providers.ExportTableActionProvider;
import pl.mpak.sky.gui.mr.ModalResult;
import pl.mpak.sky.gui.swing.MessageBox;
import pl.mpak.sky.gui.swing.SwingUtil;
import pl.mpak.usedb.gui.swing.QueryTableColumn;
import pl.mpak.util.ExceptionUtil;
import pl.mpak.util.StringManager;
import pl.mpak.util.StringManagerFactory;
import pl.mpak.util.variant.Variant;

/**
 *
 * @author proznicki
 */
public class ExportToDataText extends ExportTableActionProvider {

  private StringManager stringManager = StringManagerFactory.getStringManager(OrbadaExportDataTextPlugin.class);

  private String fileName;
  private String charset;
  
  public ExportToDataText() {
    setText(stringManager.getString("ExportToDataText-text"));
    setActionCommandKey("ExportToDataText");
    addActionListener(createActionListener());
  }

  public String getDescription() {
    return stringManager.getString("ExportToDataText-description");
  }

  private ISettings getConfig() {
    return application.getSettings("export-to-data-text-file");
  }

  private void localConfig() {
    try {
      charset = getConfig().getValue("charset").getString();
      fileName = getConfig().getValue("file-name").getString();
    } catch (Exception ex) {
      ExceptionUtil.processException(ex);
    }
  }

  private void exportTable(JTable table) {
    File file = new File(fileName);
    if (file.exists()) {
      if (MessageBox.show(SwingUtil.getRootFrame(), stringManager.getString("export"), stringManager.getString("ExportToDataText-rewrite-q"), ModalResult.YESNO, MessageBox.QUESTION) == ModalResult.NO) {
        return;
      }
      file.delete();
    }
    DataTextWriter writer = null;
    try {
      writer = new DataTextWriter(new FileOutputStream(file), charset);
      writer.writeComment("Generated by Orbada");

      DataTextColumn[] columns = new DataTextColumn[table.getColumnCount()];
      for (int c = 0; c < table.getColumnCount(); c++) {
        if (table.getColumnModel().getColumn(c) instanceof QueryTableColumn) {
          QueryTableColumn column = (QueryTableColumn) table.getColumnModel().getColumn(c);
          columns[c] = new DataTextColumn(column.getField().getOptimalSize(), column.getFieldName());
        } else {
          columns[c] = new DataTextColumn(table.getColumnModel().getColumn(c).getWidth() /6, table.getColumnModel().getColumn(c).getHeaderValue().toString());
        }
      }
      writer.writeHeader(null, columns);
      
      String[] values = new String[table.getColumnCount()];
      for (int r = 0; r < table.getRowCount(); r++) {
        for (int c = 0; c < table.getColumnCount(); c++) {
          String s = "";
          Object o = table.getValueAt(r, c);
          if (o != null) {
            if (o instanceof Variant) {
              s = ((Variant)o).getString();
            }
            else {
              s = o.toString();
            }
          }
          values[c] = s;
          if (values[c].length() > columns[c].getLength()) {
            values[c] = values[c].substring(0, columns[c].getLength() -1);
          }
        }
        writer.writeData(values);
      }
    } catch (Exception ex) {
      ExceptionUtil.processException(ex);
      MessageBox.show((Frame) null, stringManager.getString("error"), ex.getMessage(), new int[]{ModalResult.OK});
    }
    finally {
      if (writer != null) {
        try {
          writer.close();
        } catch (IOException ex) {
          ExceptionUtil.processException(ex);
        }
      }
    }
  }

  private ActionListener createActionListener() {
    return new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent event) {
        JTable table = getTable(event);
        if (table != null) {
          if (ExportToDataTextDialog.showDialog(getConfig())) {
            localConfig();
            exportTable(table);
          }
        }
      }
    };
  }

  public String getGroupName() {
    return OrbadaExportDataTextPlugin.exportGroupName;
  }
}
