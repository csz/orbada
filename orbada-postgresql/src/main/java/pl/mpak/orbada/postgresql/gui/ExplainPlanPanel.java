/*
 * ExplainPlanPanel.java
 *
 * Created on 30 grudzieñ 2007, 16:41
 */

package pl.mpak.orbada.postgresql.gui;

import java.io.Closeable;
import java.io.IOException;

import pl.mpak.orbada.gui.comps.table.DataTable;
import pl.mpak.orbada.postgresql.OrbadaPostgreSQLPlugin;
import pl.mpak.orbada.universal.gui.CommandParametersDialog;
import pl.mpak.sky.gui.mr.ModalResult;
import pl.mpak.sky.gui.swing.MessageBox;
import pl.mpak.usedb.UseDBException;
import pl.mpak.usedb.core.Command;
import pl.mpak.usedb.core.Database;
import pl.mpak.util.StringManager;
import pl.mpak.util.StringManagerFactory;

/**
 *
 * @author  akaluza
 */
public class ExplainPlanPanel extends javax.swing.JPanel implements Closeable {
  
  private final StringManager stringManager = StringManagerFactory.getStringManager(OrbadaPostgreSQLPlugin.class);

  private Database database;
  
  /** Creates new form ExplainPlanPanel */
  public ExplainPlanPanel(Database database) {
    this.database = database;
    initComponents();
    init();
  }
  
  private void init() {
  }
  
  public void updatePlan(String sqlText) {
    data.getQuery().setDatabase(database);
    try {
      data.getQuery().setCloseResultAfterOpen(true);
    } catch (UseDBException ex) {
    }
    try {
      Command command = database.createCommand("EXPLAIN\n" + sqlText, false);
      if (command.getParameterList().parameterCount() > 0) {
        if (!CommandParametersDialog.showDialog(command)) {
          return;
        }
      }
      command.execute();
      if (command.getStatement() != null) {
        data.getQuery().close();
        data.getQuery().setResultSet(command.getStatement().getResultSet());
        java.awt.EventQueue.invokeLater(new Runnable() {
          @Override
          public void run() {
            if (data.getColumnCount() > 0) {
              if (data.getColumnModel().getColumn(0).getWidth() < 100) {
                data.getColumnModel().getColumn(0).setPreferredWidth(1000);
              }
            }
          }
        });
      }
    } catch (Exception ex) {
      MessageBox.show(this, stringManager.getString("error"), ex.getMessage(), ModalResult.OK, MessageBox.ERROR);
    }
  }

  @Override
  public void close() throws IOException {
    data.getQuery().close();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        statusBar = new pl.mpak.usedb.gui.swing.QueryTableStatusBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        data = new DataTable();

        setLayout(new java.awt.BorderLayout());

        jTabbedPane1.setFocusable(false);

        jPanel1.setLayout(new java.awt.BorderLayout());

        statusBar.setTable(data);
        jPanel1.add(statusBar, java.awt.BorderLayout.SOUTH);

        jScrollPane1.setViewportView(data);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab(stringManager.getString("ExplainPlanPanel-tab_plan"), jPanel1); // NOI18N

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private DataTable data;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private pl.mpak.usedb.gui.swing.QueryTableStatusBar statusBar;
    // End of variables declaration//GEN-END:variables
  
}
