package pl.mpak.orbada.firebird.gui.wizards;

import pl.mpak.orbada.firebird.OrbadaFirebirdPlugin;
import pl.mpak.orbada.universal.gui.wizards.SqlCodeWizardPanel;
import pl.mpak.sky.gui.mr.ModalResult;
import pl.mpak.sky.gui.swing.MessageBox;
import pl.mpak.usedb.core.Database;
import pl.mpak.usedb.core.Query;
import pl.mpak.util.ExceptionUtil;
import pl.mpak.util.StringManager;
import pl.mpak.util.StringManagerFactory;
import pl.mpak.util.StringUtil;

/**
 *
 * @author  akaluza
 */
public class CommentWizard extends SqlCodeWizardPanel {
  
  private StringManager stringManager = StringManagerFactory.getStringManager(OrbadaFirebirdPlugin.class);

  private Database database;
  private String objectName;
  private String columnName;
  private String systemTableName;
  
  public CommentWizard(Database database, String objectName, String columnName, String systemTableName) {
    this.database = database;
    this.systemTableName = systemTableName;
    this.objectName = objectName;
    this.columnName = columnName;
    initComponents();
    init();
  }
  
  public CommentWizard(Database database, String objectName, String systemTableName) {
    this(database, objectName, null, systemTableName);
  }
  
  private String getKeyField() {
    if (StringUtil.equals(systemTableName, "RDB$RELATIONS")) {
      return "RDB$RELATION_NAME";
    }
    else if (StringUtil.equals(systemTableName, "RDB$EXCEPTIONS")) {
      return "RDB$EXCEPTION_NAME";
    }
    else if (StringUtil.equals(systemTableName, "RDB$FIELDS")) {
      return "RDB$FIELD_NAME";
    }
    else if (StringUtil.equals(systemTableName, "RDB$RELATION_FIELDS")) {
      return "RDB$FIELD_NAME = '" +columnName +"' AND RDB$RELATION_NAME";
    }
    else if (StringUtil.equals(systemTableName, "RDB$GENERATORS")) {
      return "RDB$GENERATOR_NAME";
    }
    else if (StringUtil.equals(systemTableName, "RDB$INDICES")) {
      return "RDB$INDEX_NAME";
    }
    else if (StringUtil.equals(systemTableName, "RDB$PROCEDURES")) {
      return "RDB$PROCEDURE_NAME";
    }
    else if (StringUtil.equals(systemTableName, "RDB$PROCEDURE_PARAMETERS")) {
      return "RDB$PARAMETER_NAME = '" +columnName +"' AND RDB$PROCEDURE_NAME";
    }
    else if (StringUtil.equals(systemTableName, "RDB$TRIGGERS")) {
      return "RDB$TRIGGER_NAME";
    }
    return "UNDEFINED";
  }
  
  private String getComment() {
    Query query = database.createQuery();
    try {
      query.setSqlText("SELECT RDB$DESCRIPTION DESCRIPTION FROM " +systemTableName +" WHERE " +getKeyField() +" = :OBJECT_NAME");
      query.paramByName("OBJECT_NAME").setString(objectName);
      query.open();
      if (!query.eof()) {
        return query.fieldByName("DESCRIPTION").getString();
      }
    }
    catch (Exception ex) {
      ExceptionUtil.processException(ex);
    }
    finally {
      query.close();
    }
    return "";
  }
  
  private void init() {
  }
  
  public void wizardShow() {
    textComments.setText(getComment());
  }
  
  public String getDialogTitle() {
    return stringManager.getString("CommentWizard-dialog-title");
  }
  
  public String getTabTitle() {
    return stringManager.getString("CommentWizard-tab-title");
  }
  
  public String getSqlCode() {
    return
      "UPDATE " +systemTableName +"\n" +
      "   SET RDB$DESCRIPTION = '" +textComments.getText() +"'\n" +
      " WHERE " +getKeyField() +" = '" +objectName +"'\n/\n";
  }
  
  public boolean execute() {
    try {
      database.executeScript(getSqlCode());
      return true;
    } catch (Exception ex) {
      MessageBox.show(this, stringManager.getString("error"), ex.getMessage(), ModalResult.OK, MessageBox.ERROR);
      return false;
    }
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel3 = new javax.swing.JLabel();
    textComments = new pl.mpak.sky.gui.swing.comp.TextField();

    jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel3.setText(stringManager.getString("comment-dd")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(textComments, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(textComments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel jLabel3;
  private pl.mpak.sky.gui.swing.comp.TextField textComments;
  // End of variables declaration//GEN-END:variables
  
}
