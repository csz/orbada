package pl.mpak.orbada.sqlite.gui.wizards;

import pl.mpak.orbada.sqlite.OrbadaSQLitePlugin;
import pl.mpak.orbada.universal.gui.wizards.SqlCodeWizardPanel;
import pl.mpak.sky.gui.mr.ModalResult;
import pl.mpak.sky.gui.swing.MessageBox;
import pl.mpak.usedb.core.Database;
import pl.mpak.usedb.core.Query;
import pl.mpak.usedb.util.SQLUtil;
import pl.mpak.util.StringManager;
import pl.mpak.util.StringManagerFactory;

/**
 *
 * @author akaluza
 */
public class PragmaDatabaseLockingModeWizard extends SqlCodeWizardPanel {

  private final StringManager stringManager = StringManagerFactory.getStringManager("sqlite");

  private Database database;
  private String databaseName;

  public PragmaDatabaseLockingModeWizard(Database database, String databaseName) {
    this.database = database;
    this.databaseName = databaseName;
    initComponents();
    init();
  }

  private void init() {
  }

  public void wizardShow() {
    try {
      Query query = database.createQuery("PRAGMA " +(databaseName != null ? SQLUtil.createSqlName(databaseName, database) +"." : "") +"LOCKING_MODE");
      try {
        textVacuum.setText(query.fieldByName("locking_mode").getString().toUpperCase());
      }
      finally {
        query.close();
      }
    } catch (Exception ex) {
    }
  }

  public String getDialogTitle() {
    return stringManager.getString("database-locking-mode");
  }

  public String getTabTitle() {
    return stringManager.getString("setting");
  }

  public String getSqlCode() {
    return 
      "PRAGMA " +(databaseName != null ? SQLUtil.createSqlName(databaseName, database) +"." : "") +"LOCKING_MODE = " +
      textVacuum.getText();
  }

  public boolean execute() {
    try {
      database.executeCommand(getSqlCode());
      return true;
    } catch (Exception ex) {
      MessageBox.show(this, stringManager.getString("error"), ex.getMessage(), ModalResult.OK, MessageBox.ERROR);
      return false;
    }
  }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    textVacuum = new pl.mpak.sky.gui.swing.comp.ComboBox();

    jLabel1.setText(stringManager.getString("locking-mode-dd")); // NOI18N

    textVacuum.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "NORMAL", "EXCLUSIVE" }));

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(textVacuum, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(146, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(textVacuum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(41, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel jLabel1;
  private pl.mpak.sky.gui.swing.comp.ComboBox textVacuum;
  // End of variables declaration//GEN-END:variables

}
