package pl.mpak.orbada.oracle.gui.wizards;

import pl.mpak.orbada.oracle.OrbadaOraclePlugin;
import pl.mpak.orbada.oracle.gui.util.SchemaComboBoxModel;
import pl.mpak.orbada.universal.gui.wizards.SqlCodeWizardPanel;
import pl.mpak.sky.gui.mr.ModalResult;
import pl.mpak.sky.gui.swing.MessageBox;
import pl.mpak.usedb.core.Database;
import pl.mpak.util.StringManager;
import pl.mpak.util.StringManagerFactory;

/**
 *
 * @author  akaluza
 */
public class CompileAllObjectsWizard extends SqlCodeWizardPanel {

  private final StringManager stringManager = StringManagerFactory.getStringManager(OrbadaOraclePlugin.class);

  private Database database;
  private String schemaName;
  private String objectType;
  private String objectStatus;
  
  public CompileAllObjectsWizard(Database database, String schemaName, String objectType, String objectStatus) {
    this.database = database;
    this.schemaName = schemaName;
    this.objectType = objectType;
    this.objectStatus = objectStatus;
    initComponents();
    init();
  }

  private void init() {
    comboSchemas.setModel(new SchemaComboBoxModel(database));
  }

  public void wizardShow() {
    ((SchemaComboBoxModel)comboSchemas.getModel()).change();
    ((SchemaComboBoxModel)comboSchemas.getModel()).select(schemaName, comboSchemas);
    if (objectStatus != null) {
      comboStatus.setSelectedItem(objectStatus);
    }
    if (objectType != null) {
      comboType.setSelectedItem(objectType);
    }
  }
  
  public String getDialogTitle() {
    return stringManager.getString("CompileAllObjectsWizard-dialog-title");
  }

  public String getTabTitle() {
    return stringManager.getString("CompileAllObjectsWizard-tab-title");
  }

  public String getSqlCode() {
    String schema = comboSchemas.getSelectedItem().toString();
    String type = comboType.getSelectedItem().toString();
    String status = comboStatus.getSelectedItem().toString();
    String typeCond = null;
    if (!"ALL".equals(type)) {
      if ("PACKAGE".equals(type)) {
        typeCond = "(OBJECT_TYPE = 'PACKAGE' or OBJECT_TYPE = 'PACKAGE BODY')";
      }
      else {
        typeCond = "OBJECT_TYPE = '" +type +"'";
      }
    }
    return
      "BEGIN\n" +
      "  FOR CUR IN (SELECT OBJECT_NAME, OBJECT_TYPE, OWNER FROM ALL_OBJECTS \n" +
      "               WHERE OWNER = '" +schema +"'\n" +
      (typeCond == null ? "" : "                 AND " +typeCond +"\n") +
      ("ALL".equals(status) ? "" : "                 AND STATUS = '" +status +"'\n") +
      "  ) LOOP\n" +
      "    BEGIN\n" +
      "      IF CUR.OBJECT_TYPE = 'PACKAGE BODY' THEN\n" +
      "        EXECUTE IMMEDIATE 'ALTER PACKAGE \"'||CUR.OWNER||'\".\"'||CUR.OBJECT_NAME||'\" COMPILE BODY';\n" +
      "      ELSE\n" +
      "        EXECUTE IMMEDIATE 'ALTER '||CUR.OBJECT_TYPE||' \"'||CUR.OWNER||'\".\"'||CUR.OBJECT_NAME||'\" COMPILE'; \n" +
      "      END IF;\n" +
      "    EXCEPTION\n" +
      "      WHEN OTHERS THEN\n" +
      "        NULL;\n" +
      "    END;\n" +
      "  END LOOP;\n" +
      "END;";
  }

  public boolean execute() {
    try {
      database.executeCommand(getSqlCode());
      return true;
    } catch (Exception ex) {
      MessageBox.show(this, stringManager.getString("error"), ex.getMessage(), ModalResult.OK, MessageBox.ERROR);
      return false;
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel5 = new javax.swing.JLabel();
    comboType = new javax.swing.JComboBox();
    jLabel6 = new javax.swing.JLabel();
    comboSchemas = new javax.swing.JComboBox();
    comboStatus = new javax.swing.JComboBox();
    jLabel7 = new javax.swing.JLabel();

    jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel5.setText(stringManager.getString("type-objects-dd")); // NOI18N

    comboType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ALL", "FUNCTION", "PROCEDURE", "PACKAGE", "TYPE", "JAVA SOURCE", "TRIGGER", "VIEW" }));

    jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel6.setText(stringManager.getString("schema-dd")); // NOI18N

    comboStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ALL", "INVALID", "VALID" }));

    jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel7.setText(stringManager.getString("object-state-dd")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(comboType, 0, 246, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(comboSchemas, 0, 246, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(comboStatus, 0, 246, Short.MAX_VALUE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel6)
          .addComponent(comboSchemas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(4, 4, 4)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel5)
          .addComponent(comboType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel7)
          .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(112, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox comboSchemas;
  private javax.swing.JComboBox comboStatus;
  private javax.swing.JComboBox comboType;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  // End of variables declaration//GEN-END:variables
}
