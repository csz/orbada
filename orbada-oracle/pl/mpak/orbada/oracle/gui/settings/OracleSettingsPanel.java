package pl.mpak.orbada.oracle.gui.settings;

import pl.mpak.orbada.oracle.OrbadaOraclePlugin;
import pl.mpak.orbada.oracle.services.OracleSettingsProvider;
import pl.mpak.orbada.plugins.IApplication;
import pl.mpak.orbada.plugins.ISettings;
import pl.mpak.orbada.plugins.ISettingsComponent;
import pl.mpak.util.StringManager;
import pl.mpak.util.StringManagerFactory;

/**
 *
 * @author  akaluza
 */
public class OracleSettingsPanel extends javax.swing.JPanel implements ISettingsComponent {
  
  private final StringManager stringManager = StringManagerFactory.getStringManager(OrbadaOraclePlugin.class);

  private IApplication application;
  private ISettings settings;

  public OracleSettingsPanel(IApplication application) {
    this.application = application;
    initComponents();
    init();
  }
  
  private void init() {
    settings = application.getSettings(OracleSettingsProvider.settingsName);
    restoreSettings();
  }
  
  public void restoreSettings() {
    checkMultiExplainPlan.setSelected(settings.getValue(OracleSettingsProvider.setMultiExplainPlan, false));
    checkPackageTabText.setSelected(settings.getValue(OracleSettingsProvider.setPackageTabText, false));
    checkEditorHighlightSynonyms.setSelected(settings.getValue(OracleSettingsProvider.setEditorHighlightSynonyms, false));
  }

  public void applySettings() {
    settings.setValue(OracleSettingsProvider.setMultiExplainPlan, checkMultiExplainPlan.isSelected());
    settings.setValue(OracleSettingsProvider.setPackageTabText, checkPackageTabText.isSelected());
    settings.setValue(OracleSettingsProvider.setEditorHighlightSynonyms, checkEditorHighlightSynonyms.isSelected());
    settings.store();
  }

  public void cancelSettings() {
    restoreSettings();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    checkMultiExplainPlan = new javax.swing.JCheckBox();
    checkPackageTabText = new javax.swing.JCheckBox();
    checkEditorHighlightSynonyms = new javax.swing.JCheckBox();

    checkMultiExplainPlan.setText(stringManager.getString("OracleSettingsPanel-checkMultiExplainPlan-text")); // NOI18N

    checkPackageTabText.setText(stringManager.getString("OracleSettingsPanel-checkPackageTabText-text")); // NOI18N

    checkEditorHighlightSynonyms.setText(stringManager.getString("checkEditorHighlightSynonyms-text")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(checkMultiExplainPlan)
          .addComponent(checkPackageTabText)
          .addComponent(checkEditorHighlightSynonyms))
        .addContainerGap(69, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(checkMultiExplainPlan)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(checkPackageTabText)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(checkEditorHighlightSynonyms)
        .addContainerGap(255, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox checkEditorHighlightSynonyms;
  private javax.swing.JCheckBox checkMultiExplainPlan;
  private javax.swing.JCheckBox checkPackageTabText;
  // End of variables declaration//GEN-END:variables
  
}
