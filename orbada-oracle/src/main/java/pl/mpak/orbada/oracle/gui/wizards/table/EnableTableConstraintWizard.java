package pl.mpak.orbada.oracle.gui.wizards.table;

import java.awt.Component;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import pl.mpak.orbada.oracle.OrbadaOraclePlugin;
import pl.mpak.orbada.oracle.dbinfo.OracleExceptionTableInfo;
import pl.mpak.orbada.universal.gui.wizards.SqlCodeWizardPanel;
import pl.mpak.orbada.oracle.dbinfo.OracleTableInfo;
import pl.mpak.orbada.oracle.gui.util.ExceptionTableComboBoxModel;
import pl.mpak.orbada.oracle.gui.util.TableComboBoxModel;
import pl.mpak.orbada.oracle.gui.util.TableConstraintComboBoxModel;
import pl.mpak.orbada.oracle.gui.util.TableItemListener;
import pl.mpak.sky.gui.mr.ModalResult;
import pl.mpak.sky.gui.swing.MessageBox;
import pl.mpak.usedb.core.Database;
import pl.mpak.usedb.script.SimpleSQLScript;
import pl.mpak.usedb.util.SQLUtil;
import pl.mpak.util.StringManager;
import pl.mpak.util.StringManagerFactory;

/**
 *
 * @author  akaluza
 */
public class EnableTableConstraintWizard extends SqlCodeWizardPanel {
  
  private final StringManager stringManager = StringManagerFactory.getStringManager(OrbadaOraclePlugin.class);

  private Database database;
  private String schemaName;
  private String tableName;
  private String constraintName;
  
  public EnableTableConstraintWizard(Database database, String schemaName, String tableName, String constraintName) {
    this.database = database;
    this.schemaName = schemaName;
    this.tableName = tableName;
    this.constraintName = constraintName;
    initComponents();
    init();
  }
  
  private void init() {
    comboConstraints.setModel(new TableConstraintComboBoxModel(database));
    comboTables.setModel(new TableComboBoxModel(database));
    comboExceptionTables.setModel(new ExceptionTableComboBoxModel(database));
    
    comboTables.addItemListener(new TableItemListener() {
      public void itemChanged(OracleTableInfo info) {
        ((TableConstraintComboBoxModel)comboConstraints.getModel()).change(info.getSchema().getName(), info.getName());
      }
    });
    
    comboExceptionTables.setRenderer(new DefaultListCellRenderer() {
      @Override
      public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
        super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus); 
        if (value instanceof OracleExceptionTableInfo) {
          OracleExceptionTableInfo info = (OracleExceptionTableInfo)value;
          setText(SQLUtil.createSqlName(info.getTableOwner(), info.getName()));
        }
        return this;
      }
    });
  }
  
  public void wizardShow() {
    ((TableComboBoxModel)comboTables.getModel()).change(schemaName);
    ((TableComboBoxModel)comboTables.getModel()).select(tableName, comboTables);
    ((TableConstraintComboBoxModel)comboConstraints.getModel()).select(constraintName, comboConstraints);
    ((ExceptionTableComboBoxModel)comboExceptionTables.getModel()).change();
  }
  
  public String getDialogTitle() {
    return stringManager.getString("EnableTableConstraintWizard-dialog-title");
  }
  
  public String getTabTitle() {
    return stringManager.getString("EnableTableConstraintWizard-tab-title");
  }
  
  public String getSqlCode() {
    OracleExceptionTableInfo info = null;
    if (checkExceptions.isSelected() && comboExceptionTables.getSelectedItem() instanceof OracleExceptionTableInfo) {
      info = (OracleExceptionTableInfo)comboExceptionTables.getSelectedItem();
    }
    return 
      (info != null ? 
        ("DELETE FROM " +SQLUtil.createSqlName(info.getTableOwner(), info.getName()) +
         " WHERE OWNER = '" +schemaName +"' AND TABLE_NAME = '" +comboTables.getSelectedItem().toString() +"' AND CONSTRAINT = '" +comboConstraints.getSelectedItem().toString() +"'\n/\n") : ""
      ) +
      "ALTER TABLE " +SQLUtil.createSqlName(schemaName, comboTables.getSelectedItem().toString()) +
      " " +comboStatus.getSelectedItem().toString() +
      " CONSTRAINT " +SQLUtil.createSqlName(comboConstraints.getSelectedItem().toString()) +
      (info != null ? ("\n EXCEPTIONS INTO " +SQLUtil.createSqlName(info.getTableOwner(), info.getName())) : "") +
      "\n/";
  }
  
  public boolean execute() {
    SimpleSQLScript script = new SimpleSQLScript(database);
    if (!script.executeScript(getSqlCode())) {
      MessageBox.show(this, stringManager.getString("error"), script.getErrors(), ModalResult.OK, MessageBox.ERROR);
      return false;
    }
    return true;
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel2 = new javax.swing.JLabel();
    comboTables = new javax.swing.JComboBox();
    jLabel3 = new javax.swing.JLabel();
    comboConstraints = new javax.swing.JComboBox();
    jLabel4 = new javax.swing.JLabel();
    comboStatus = new javax.swing.JComboBox();
    comboExceptionTables = new javax.swing.JComboBox();
    checkExceptions = new javax.swing.JCheckBox();

    jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel2.setText(stringManager.getString("table-dd")); // NOI18N

    jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel3.setText(stringManager.getString("constraint-list-dd")); // NOI18N

    jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel4.setText(stringManager.getString("state-dd")); // NOI18N

    comboStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ENABLE", "DISABLE" }));

    checkExceptions.setText(stringManager.getString("exceptions-put-in-to-dd")); // NOI18N
    checkExceptions.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(checkExceptions, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
          .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
          .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(comboTables, 0, 243, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(comboConstraints, 0, 243, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(comboStatus, 0, 243, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addGap(4, 4, 4)
            .addComponent(comboExceptionTables, 0, 243, Short.MAX_VALUE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(comboTables, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel2))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(comboConstraints, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel3))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel4))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(comboExceptionTables, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(checkExceptions))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox checkExceptions;
  private javax.swing.JComboBox comboConstraints;
  private javax.swing.JComboBox comboExceptionTables;
  private javax.swing.JComboBox comboStatus;
  private javax.swing.JComboBox comboTables;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  // End of variables declaration//GEN-END:variables
  
}
