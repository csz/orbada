package pl.mpak.orbada.oracle.gui.settings;

import javax.swing.SpinnerNumberModel;
import pl.mpak.orbada.oracle.OrbadaOraclePlugin;
import pl.mpak.orbada.oracle.services.OracleDbmsOutputSettingsProvider;
import pl.mpak.orbada.plugins.IApplication;
import pl.mpak.orbada.plugins.ISettings;
import pl.mpak.orbada.plugins.ISettingsComponent;
import pl.mpak.usedb.core.Database;
import pl.mpak.util.StringManager;
import pl.mpak.util.StringManagerFactory;

/**
 *
 * @author  akaluza
 */
public class DbmsOutputConnectionSettingsPanel extends javax.swing.JPanel implements ISettingsComponent {
  
  private final StringManager stringManager = StringManagerFactory.getStringManager(OrbadaOraclePlugin.class);

  private IApplication application;
  private ISettings settings;
  private Database database;

  /** Creates new form DatabaseSettingsPanel */
  public DbmsOutputConnectionSettingsPanel(IApplication application, Database database) {
    this.application = application;
    this.database = database;
    initComponents();
    init();
  }
  
  private void init() {
    settings = application.getSettings(database.getUserProperties().getProperty("schemaId"), OracleDbmsOutputSettingsProvider.settingsName);
    spinBufferSize.setModel(new SpinnerNumberModel(1000, 1, 1000000, 100));
    spinRefreshInterval.setModel(new SpinnerNumberModel(5, 1, 1000, 1));
    restoreSettings();
  }
  
  public void restoreSettings() {
    checkUseGlobalSettings.setSelected(settings.getValue(OracleDbmsOutputSettingsProvider.setUseGlobalSettings, true));
    spinBufferSize.setValue(settings.getValue(OracleDbmsOutputSettingsProvider.setBufferSize, 1000L).intValue());
    spinRefreshInterval.setValue(settings.getValue(OracleDbmsOutputSettingsProvider.setRefreshInterval, 5L).intValue());
    checkOnStartupViewEnable.setSelected(settings.getValue(OracleDbmsOutputSettingsProvider.setOnStartupViewEnable, true));
    setControlEnabled();
  }

  public void applySettings() {
    settings.setValue(OracleDbmsOutputSettingsProvider.setUseGlobalSettings, checkUseGlobalSettings.isSelected());
    settings.setValue(OracleDbmsOutputSettingsProvider.setBufferSize, (long)(Integer)spinBufferSize.getValue());
    settings.setValue(OracleDbmsOutputSettingsProvider.setRefreshInterval, (long)(Integer)spinRefreshInterval.getValue());
    settings.setValue(OracleDbmsOutputSettingsProvider.setOnStartupViewEnable, checkOnStartupViewEnable.isSelected());
    settings.store();
  }

  public void cancelSettings() {
    restoreSettings();
  }

  private void setControlEnabled() {
    checkOnStartupViewEnable.setEnabled(!checkUseGlobalSettings.isSelected());
    labelBufferSize.setEnabled(!checkUseGlobalSettings.isSelected());
    spinBufferSize.setEnabled(!checkUseGlobalSettings.isSelected());
    labelBufferSizeKB.setEnabled(!checkUseGlobalSettings.isSelected());
    labelRefreshInterval.setEnabled(!checkUseGlobalSettings.isSelected());
    spinRefreshInterval.setEnabled(!checkUseGlobalSettings.isSelected());
    labelRefreshIntervalSec.setEnabled(!checkUseGlobalSettings.isSelected());
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    labelBufferSize = new javax.swing.JLabel();
    spinBufferSize = new javax.swing.JSpinner();
    labelBufferSizeKB = new javax.swing.JLabel();
    checkOnStartupViewEnable = new javax.swing.JCheckBox();
    labelRefreshInterval = new javax.swing.JLabel();
    spinRefreshInterval = new javax.swing.JSpinner();
    labelRefreshIntervalSec = new javax.swing.JLabel();
    checkUseGlobalSettings = new javax.swing.JCheckBox();

    labelBufferSize.setText(stringManager.getString("DbmsOutputSettingsPanel-buffer-size-dd")); // NOI18N

    labelBufferSizeKB.setText(stringManager.getString("in-kibi")); // NOI18N

    checkOnStartupViewEnable.setText(stringManager.getString("DbmsOutputSettingsPanel-checkOnStartupViewEnable-text")); // NOI18N

    labelRefreshInterval.setText(stringManager.getString("DbmsOutputSettingsPanel-refresh-at-dd")); // NOI18N

    labelRefreshIntervalSec.setText(stringManager.getString("seconds")); // NOI18N

    checkUseGlobalSettings.setText(stringManager.getString("checkUseGlobalSettings-text")); // NOI18N
    checkUseGlobalSettings.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        checkUseGlobalSettingsItemStateChanged(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(checkOnStartupViewEnable)
          .addGroup(layout.createSequentialGroup()
            .addComponent(labelBufferSize)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(spinBufferSize, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(labelBufferSizeKB))
          .addGroup(layout.createSequentialGroup()
            .addComponent(labelRefreshInterval)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(spinRefreshInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(labelRefreshIntervalSec))
          .addComponent(checkUseGlobalSettings))
        .addContainerGap(195, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(checkUseGlobalSettings)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(checkOnStartupViewEnable)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(labelBufferSize)
          .addComponent(labelBufferSizeKB)
          .addComponent(spinBufferSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(labelRefreshInterval)
          .addComponent(labelRefreshIntervalSec)
          .addComponent(spinRefreshInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(248, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void checkUseGlobalSettingsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkUseGlobalSettingsItemStateChanged
    setControlEnabled();
  }//GEN-LAST:event_checkUseGlobalSettingsItemStateChanged
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox checkOnStartupViewEnable;
  private javax.swing.JCheckBox checkUseGlobalSettings;
  private javax.swing.JLabel labelBufferSize;
  private javax.swing.JLabel labelBufferSizeKB;
  private javax.swing.JLabel labelRefreshInterval;
  private javax.swing.JLabel labelRefreshIntervalSec;
  private javax.swing.JSpinner spinBufferSize;
  private javax.swing.JSpinner spinRefreshInterval;
  // End of variables declaration//GEN-END:variables
  
}
