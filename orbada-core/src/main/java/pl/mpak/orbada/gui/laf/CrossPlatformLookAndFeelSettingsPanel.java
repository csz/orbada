/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CrossPlatformLookAndFeelSettingsPanel.java
 *
 * Created on 2010-10-31, 18:33:36
 */

package pl.mpak.orbada.gui.laf;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Properties;

import pl.mpak.orbada.Consts;
import pl.mpak.orbada.gui.laf.services.CrossPlatformLookAndFeelService;
import pl.mpak.orbada.Consts;
import pl.mpak.orbada.gui.laf.services.CrossPlatformLookAndFeelService;
import pl.mpak.orbada.plugins.IApplication;
import pl.mpak.orbada.plugins.ISettingsComponent;
import pl.mpak.sky.gui.mr.ModalResult;
import pl.mpak.sky.gui.swing.MessageBox;
import pl.mpak.util.ExceptionUtil;
import pl.mpak.util.StringManager;
import pl.mpak.util.StringManagerFactory;

/**
 *
 * @author akaluza
 */
public class CrossPlatformLookAndFeelSettingsPanel extends javax.swing.JPanel implements ISettingsComponent {

  private final static StringManager stringManager = StringManagerFactory.getStringManager("orbada");

  private IApplication application;
  private File propFile;
  private Properties props;
  private String[] themeNames;
  private Class[] themeClasses = {
    javax.swing.plaf.metal.DefaultMetalTheme.class,
    BluesMetalTheme.class,
    javax.swing.plaf.metal.OceanTheme.class
  };
  private int selectedTheme = -1;

  /** Creates new form CrossPlatformLookAndFeelSettingsPanel */
  public CrossPlatformLookAndFeelSettingsPanel(IApplication application) {
    this.application = application;
    initComponents();
    init();
  }

  private void init() {
    themeNames = new String[] {
      stringManager.getString("CrossPlatformLookAndFeelSettingsPanel-default"),
      stringManager.getString("CrossPlatformLookAndFeelSettingsPanel-blue"),
      stringManager.getString("CrossPlatformLookAndFeelSettingsPanel-ocean")
    };
    propFile = new File(application.getConfigPath() + "/laf-cross-platform.properties");
    comboTheme.setModel(new javax.swing.DefaultComboBoxModel(themeNames));
    props = new Properties();
    if (propFile.exists()) {
      try {
        props.load(new FileInputStream(propFile));
      } catch (Exception ex) {
        MessageBox.show(this, stringManager.getString("error"), ex.getMessage(), ModalResult.OK, MessageBox.ERROR);
        ExceptionUtil.processException(ex);
      }
    }
    restoreSettings();
  }

  @Override
  public void restoreSettings() {
    String currentTheme = props.getProperty("current-theme", themeClasses[0].getName());
    for (int i=0; i<themeClasses.length; i++) {
      if (themeClasses[i].getName().equals(currentTheme)) {
        comboTheme.setSelectedIndex(i);
        break;
      }
    }
    selectedTheme = comboTheme.getSelectedIndex();
    if (comboTheme.getSelectedIndex() == -1) {
      comboTheme.setSelectedIndex(0);
    }
  }

  @Override
  public void applySettings() {
    props.setProperty("current-theme", themeClasses[comboTheme.getSelectedIndex()].getName());
    try {
      props.store(new FileOutputStream(propFile), "");
    } catch (Exception ex) {
      ExceptionUtil.processException(ex);
    }
    if (selectedTheme != comboTheme.getSelectedIndex() &&
        CrossPlatformLookAndFeelService.loogAndFeelId.equals(application.getSettings(Consts.orbadaSettings).getValue(Consts.lookAndFeelSetting, ""))) {
      application.updateLAF();
    }
  }

  @Override
  public void cancelSettings() {
    restoreSettings();
  }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    comboTheme = new pl.mpak.sky.gui.swing.comp.ComboBox();

    jLabel1.setText(stringManager.getString("CrossPlatformLookAndFeelSettingsPanel-select-theme-dd")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(comboTheme, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel1))
        .addContainerGap(194, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(comboTheme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(247, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private pl.mpak.sky.gui.swing.comp.ComboBox comboTheme;
  private javax.swing.JLabel jLabel1;
  // End of variables declaration//GEN-END:variables

}
