/*
 * ImportTodo.java
 *
 * Created on 9 sierpieñ 2008, 11:42
 */

package pl.mpak.orbada.todo.gui;

import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import javax.swing.JComponent;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import pl.mpak.orbada.core.Application;
import pl.mpak.orbada.todo.OrbadaTodoPlugin;
import pl.mpak.orbada.todo.db.Todo;
import pl.mpak.sky.gui.mr.ModalResult;
import pl.mpak.sky.gui.swing.MessageBox;
import pl.mpak.sky.gui.swing.SwingUtil;
import pl.mpak.util.ExceptionUtil;
import pl.mpak.util.FileUtil;
import pl.mpak.util.StringManager;
import pl.mpak.util.StringManagerFactory;
import pl.mpak.util.files.FileExtensionFilter;
import pl.mpak.util.patt.Resolvers;

/**
 *
 * @author  akaluza
 */
public class ImportTodoDialog extends javax.swing.JDialog {

  private final static StringManager stringManager = StringManagerFactory.getStringManager(OrbadaTodoPlugin.class);

  private int modalResult = ModalResult.NONE;
  private File[] files;
  private ArrayList<ImportTodoItem> list;

  /** Creates new form ImportTodo */
  public ImportTodoDialog(File[] files) {
    initComponents();
    list = new ArrayList<ImportTodoItem>();
    this.files = files;
    init();
  }
  
  public static boolean showDialog() {
    File[] files = FileUtil.selectFilesToOpen(
      Application.get().getMainFrame(), stringManager.getString("opening-todo"), Resolvers.expand("$(orbada.home)") +"/todos",
      new FileExtensionFilter[] {new FileExtensionFilter(stringManager.getString("todo-files"), new String[] {".xml.todo"})});
    if (files != null) {
      ImportTodoDialog dialog = new ImportTodoDialog(files);
      dialog.setVisible(true);
      return dialog.modalResult == ModalResult.OK;
    }
    else {
      return false;
    }
  }
  
  private TableColumn createTableColumn(int columnIndex, int width, String title, TableCellRenderer renderer) {
    TableColumn column = new TableColumn(columnIndex, width, renderer, null);
    column.setHeaderValue(title);
    return column;
  }

  private void init() {
    setSize(600, 350);
    for (File file : files) {
      try {
        Todo newTodo = new Todo();
        newTodo.loadFromXML(new FileInputStream(file));
        list.add(new ImportTodoItem(newTodo));
      } catch (Exception ex) {
        ExceptionUtil.processException(ex);
      }
    }
    tableTodos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    tableTodos.setModel(new ImportTodoTableModel(list.toArray(new ImportTodoItem[list.size()])));
    tableTodos.setColumnModel(new DefaultTableColumnModel());
    tableTodos.getColumnModel().addColumn(createTableColumn(0, 30, stringManager.getString("imp"), null));
    tableTodos.getColumnModel().addColumn(createTableColumn(1, 30, stringManager.getString("act"), new DefaultTableCellRenderer()));
    tableTodos.getColumnModel().addColumn(createTableColumn(2, 400, stringManager.getString("task"), new DefaultTableCellRenderer()));
    tableTodos.getColumnModel().addColumn(createTableColumn(3, 120, stringManager.getString("updated"), new DefaultTableCellRenderer()));

    tableTodos.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
      public void valueChanged(ListSelectionEvent e) {
        cmView.setEnabled(e.getFirstIndex() >= 0);
      }
    });

    getRootPane().setDefaultButton(buttonOk);
    getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(cmCancel.getShortCut(), "cmCancel");
    getRootPane().getActionMap().put("cmCancel", cmCancel);
    SwingUtil.centerWithinScreen(this);
  }

  @Override
  public void dispose() {
    super.dispose();
  }

  /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    cmOk = new pl.mpak.sky.gui.swing.Action();
    cmCancel = new pl.mpak.sky.gui.swing.Action();
    cmView = new pl.mpak.sky.gui.swing.Action();
    buttonOk = new javax.swing.JButton();
    buttonCancel = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    tableTodos = new pl.mpak.orbada.gui.comps.table.Table();
    buttonView = new javax.swing.JButton();

    cmOk.setShortCut(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, 0));
    cmOk.setText(stringManager.getString("cmOk-text")); // NOI18N
    cmOk.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cmOkActionPerformed(evt);
      }
    });

    cmCancel.setShortCut(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
    cmCancel.setText(stringManager.getString("cmCancel-text")); // NOI18N
    cmCancel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cmCancelActionPerformed(evt);
      }
    });

    cmView.setEnabled(false);
    cmView.setText(stringManager.getString("cmView-text")); // NOI18N
    cmView.setTooltip(stringManager.getString("cmView-hint")); // NOI18N
    cmView.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cmViewActionPerformed(evt);
      }
    });

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle(stringManager.getString("ImportTodoDialog-title")); // NOI18N
    setModal(true);

    buttonOk.setAction(cmOk);
    buttonOk.setPreferredSize(new java.awt.Dimension(75, 23));

    buttonCancel.setAction(cmCancel);
    buttonCancel.setPreferredSize(new java.awt.Dimension(75, 23));

    tableTodos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    jScrollPane1.setViewportView(tableTodos);

    buttonView.setAction(cmView);
    buttonView.setPreferredSize(new java.awt.Dimension(75, 23));

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addComponent(buttonView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 340, Short.MAX_VALUE)
            .addComponent(buttonOk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(buttonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(buttonOk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(buttonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(buttonView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

private void cmOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmOkActionPerformed
  try {
    modalResult = ModalResult.OK;
    for (ImportTodoItem item : list) {
      item.updateTodo();
    }
    dispose();
  } catch (Exception ex) {
    ExceptionUtil.processException(ex);
    MessageBox.show(this, stringManager.getString("error"), ex.getMessage(), new int[] {ModalResult.OK});
  }
}//GEN-LAST:event_cmOkActionPerformed

private void cmCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmCancelActionPerformed
  modalResult = ModalResult.CANCEL;
  dispose();
}//GEN-LAST:event_cmCancelActionPerformed

private void cmViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmViewActionPerformed
  if (tableTodos.getSelectedRow() >= 0) {
    ImportTodoItem item = ((ImportTodoTableModel)tableTodos.getModel()).getItem(tableTodos.getSelectedRow());
      try {
        TodoEditDialog.showDialog(item.getNewTodo(), false);
      } catch (Exception ex) {
        ExceptionUtil.processException(ex);
      }
  }
}//GEN-LAST:event_cmViewActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton buttonCancel;
  private javax.swing.JButton buttonOk;
  private javax.swing.JButton buttonView;
  private pl.mpak.sky.gui.swing.Action cmCancel;
  private pl.mpak.sky.gui.swing.Action cmOk;
  private pl.mpak.sky.gui.swing.Action cmView;
  private javax.swing.JScrollPane jScrollPane1;
  private pl.mpak.orbada.gui.comps.table.Table tableTodos;
  // End of variables declaration//GEN-END:variables

}
