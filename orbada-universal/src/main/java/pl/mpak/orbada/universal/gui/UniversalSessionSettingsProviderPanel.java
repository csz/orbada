/*
 * SessionSettingsProviderPanel.java
 *
 * Created on 17 grudzieñ 2007, 20:43
 */

package pl.mpak.orbada.universal.gui;

import java.io.Closeable;
import java.io.IOException;
import java.sql.SQLException;
import pl.mpak.orbada.plugins.IApplication;
import pl.mpak.orbada.plugins.ISettings;
import pl.mpak.orbada.plugins.ISettingsComponent;
import pl.mpak.orbada.universal.OrbadaUniversalPlugin;
import pl.mpak.orbada.universal.services.UniversalSettingsProvider;
import pl.mpak.usedb.core.Database;
import pl.mpak.util.ExceptionUtil;
import pl.mpak.util.StringManager;
import pl.mpak.util.StringManagerFactory;

/**
 *
 * @author  akaluza
 */
public class UniversalSessionSettingsProviderPanel extends javax.swing.JPanel implements Closeable, ISettingsComponent {
  
  private final StringManager stringManager = StringManagerFactory.getStringManager("universal");

  private IApplication application;
  private ISettings settings;
  private Database database;
  
  /** Creates new form SessionSettingsProviderPanel */
  public UniversalSessionSettingsProviderPanel(IApplication application, Database database) {
    this.application = application;
    this.database = database;
    initComponents();
    init();
  }
  
  private void init() {
    comboAutoCloneConnection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { 
      stringManager.getString("global-settings"), 
      stringManager.getString("clone"), 
      stringManager.getString("not-clone")
    }));
    
    settings = application.getSettings(database.getUserProperties().getProperty("schemaId"), SqlQueryPanelView.settingsName);
    restoreSettings();
  }
  
  public void restoreSettings() {
    try {
      if (database.getMetaData().supportsTransactions()) {
        checkAutoCommit.setSelected(database.getConnection().getAutoCommit());
      }
      else {
        checkAutoCommit.setEnabled(false);
      }
      comboAutoCloneConnection.setSelectedIndex(settings.getValue(UniversalSettingsProvider.setAutoCloneConnection, (long)0).intValue());
    } catch (SQLException ex) {
    }
  }

  public void applySettings() {
    if (checkAutoCommit.isEnabled()) {
      try {
        database.setAutoCommit(checkAutoCommit.isSelected());
        settings.setValue(UniversalSettingsProvider.setAutoCloneConnection, (long)comboAutoCloneConnection.getSelectedIndex());
        settings.store();
      } catch (SQLException ex) {
        ExceptionUtil.processException(ex);
      }
    }
  }

  public void cancelSettings() {
    restoreSettings();
  }
  
  public void close() throws IOException {
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkAutoCommit = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboAutoCloneConnection = new pl.mpak.sky.gui.swing.comp.ComboBox();

        checkAutoCommit.setText(stringManager.getString("UniversalSessionSettingsProviderPanel-auto-commit")); // NOI18N

        jLabel1.setText(stringManager.getString("UniversalSessionSettingsProviderPanel-set-below-no-schema-info")); // NOI18N

        jLabel2.setText(stringManager.getString("GeneralSettingsPanel-auto-clone-connection")); // NOI18N

        comboAutoCloneConnection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Global setting", "Clone", "Not clone" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkAutoCommit)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addComponent(comboAutoCloneConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkAutoCommit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboAutoCloneConnection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(208, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkAutoCommit;
    private pl.mpak.sky.gui.swing.comp.ComboBox comboAutoCloneConnection;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
  
}
