/*
 * AdderSelectorDialog.java
 *
 * Created on 2011-01-23, 17:57:00
 */

package pl.mpak.orbada.adder.gui;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.math.BigDecimal;
import javax.swing.DefaultListModel;
import pl.mpak.orbada.adder.OrbadaAdderPlugin;
import pl.mpak.sky.gui.mr.ModalResult;
import pl.mpak.sky.gui.swing.Action;
import pl.mpak.sky.gui.swing.ActionListCellRenderer;
import pl.mpak.sky.gui.swing.MessageBox;
import pl.mpak.sky.gui.swing.SwingUtil;
import pl.mpak.usedb.core.Query;
import pl.mpak.usedb.core.QueryField;
import pl.mpak.usedb.gui.swing.QueryTable;
import pl.mpak.usedb.gui.swing.QueryTableColumn;
import pl.mpak.util.ExceptionUtil;
import pl.mpak.util.StringManager;
import pl.mpak.util.StringManagerFactory;
import pl.mpak.util.variant.Variant;

/**
 *
 * @author akaluza
 */
public class AdderSelectorDialog extends javax.swing.JDialog {

  private StringManager stringManager = StringManagerFactory.getStringManager("adder");

  private QueryTable table;
  private Query query;
  private QueryField field;

  public static void showDialog(QueryTable table) {
    AdderSelectorDialog dialog = new AdderSelectorDialog(table);
    dialog.setVisible(true);
  }

  /** Creates new form AdderSelectorDialog */
  public AdderSelectorDialog(QueryTable table) {
    super((Window)SwingUtil.getWindowComponent(table));
    this.table = table;
    query = table.getQuery();
    this.field = ((QueryTableColumn)table.getColumnModel().getColumn(table.getSelectedColumn())).getField();
    
    initComponents();
    init();
  }

  private void init() {
    listSelect.addKeyListener(new KeyAdapter() {
      @Override
      public void keyPressed(KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
          ((Action)listSelect.getSelectedValue()).performe();
          dispose();
          evt.consume();
        }
        else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
          dispose();
          evt.consume();
        }
      }
    });
    listSelect.addMouseListener(new MouseListener() {
      public void mouseClicked(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
          ((Action)listSelect.getSelectedValue()).performe();
          dispose();
          e.consume();
        }
      }
      public void mousePressed(MouseEvent e) {
      }
      public void mouseReleased(MouseEvent e) {
      }
      public void mouseEntered(MouseEvent e) {
      }
      public void mouseExited(MouseEvent e) {
      }
    });

    listSelect.setCellRenderer(new ActionListCellRenderer());
    DefaultListModel model = new DefaultListModel();
    listSelect.setModel(model);

    model.addElement(cmSum);
    model.addElement(cmAvg);
    model.addElement(cmMin);
    model.addElement(cmMax);
    model.addElement(cmConcat);

    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        listSelect.setSelectedIndex(0);
      }
    });

    pack();

    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    Rectangle rect = table.getCellRect(0, table.getSelectedColumn(), true);
    Point point = table.getLocationOnScreen();
    int top = point.y -getHeight();
    if (top < 10) {
      top = 10;
    }
    int left = point.x +rect.x +(rect.width -(getWidth() +10)) /2;
    if (left < 10) {
      left = 10;
    }
    else if (left +getWidth() > screenSize.getWidth()) {
      left = (int)screenSize.getWidth() -10 -getWidth();
    }

    setBounds(left, top, getWidth() +10, getHeight());
  }

  private void copyToClipboard(String value) {
    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
    StringSelection data = new StringSelection(value);
    clipboard.setContents(data, data);
  }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    cmSum = new pl.mpak.sky.gui.swing.Action();
    cmAvg = new pl.mpak.sky.gui.swing.Action();
    cmMin = new pl.mpak.sky.gui.swing.Action();
    cmMax = new pl.mpak.sky.gui.swing.Action();
    cmConcat = new pl.mpak.sky.gui.swing.Action();
    jPanel1 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    listSelect = new javax.swing.JList();

    cmSum.setSmallIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/mpak/res/icons/sum.gif"))); // NOI18N
    cmSum.setText(stringManager.getString("cmSum-text")); // NOI18N
    cmSum.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cmSumActionPerformed(evt);
      }
    });

    cmAvg.setText(stringManager.getString("cmAvg-text")); // NOI18N
    cmAvg.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cmAvgActionPerformed(evt);
      }
    });

    cmMin.setText(stringManager.getString("cmMin-text")); // NOI18N
    cmMin.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cmMinActionPerformed(evt);
      }
    });

    cmMax.setText(stringManager.getString("cmMax-text")); // NOI18N
    cmMax.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cmMaxActionPerformed(evt);
      }
    });

    cmConcat.setText(stringManager.getString("cmConcat-text")); // NOI18N
    cmConcat.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cmConcatActionPerformed(evt);
      }
    });

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle(stringManager.getString("AdderSelectorDialog-title")); // NOI18N
    setUndecorated(true);
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowDeactivated(java.awt.event.WindowEvent evt) {
        formWindowDeactivated(evt);
      }
    });

    jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
    jPanel1.setLayout(new java.awt.BorderLayout());

    listSelect.setFixedCellHeight(18);
    jScrollPane1.setViewportView(listSelect);

    jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

    getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
      if (isVisible()) {
        dispose();
      }
    }//GEN-LAST:event_formWindowDeactivated

    private void cmSumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmSumActionPerformed
      try {
        final Variant v = new Variant(new BigDecimal(0));
        query.first();
        while (!query.eof()) {
          if (!field.getValue().isNull()) {
            v.add(field.getValue());
          }
          query.next();
        }
        copyToClipboard(v.toString());
        java.awt.EventQueue.invokeLater(new Runnable() {
          public void run() {
            MessageBox.show(stringManager.getString("result"), String.format(stringManager.getString("sum-result"), new Object[] {v.toString()}));
          }
        });
      } catch (java.lang.NumberFormatException ex) {
        java.awt.EventQueue.invokeLater(new Runnable() {
          public void run() {
            MessageBox.show(null, stringManager.getString("error"), stringManager.getString("non-numeric-value"), ModalResult.OK, MessageBox.ERROR);
          }
        });
      } catch (Exception ex) {
        ExceptionUtil.processException(ex);
      }
    }//GEN-LAST:event_cmSumActionPerformed

    private void cmAvgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmAvgActionPerformed
      try {
        final Variant v = new Variant(new BigDecimal(0));
        int count = 0;
        query.first();
        while (!query.eof()) {
          if (!field.getValue().isNull()) {
            v.add(field.getValue());
            count++;
          }
          query.next();
        }
        v.divide(new Variant(count));
        copyToClipboard(v.toString());
        java.awt.EventQueue.invokeLater(new Runnable() {
          public void run() {
            MessageBox.show(stringManager.getString("result"), String.format(stringManager.getString("avg-result"), new Object[] {v.toString()}));
          }
        });
      } catch (java.lang.NumberFormatException ex) {
        java.awt.EventQueue.invokeLater(new Runnable() {
          public void run() {
            MessageBox.show(null, stringManager.getString("error"), stringManager.getString("non-numeric-value"), ModalResult.OK, MessageBox.ERROR);
          }
        });
      } catch (Exception ex) {
        ExceptionUtil.processException(ex);
      }
    }//GEN-LAST:event_cmAvgActionPerformed

    private void cmMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmMinActionPerformed
      try {
        final Variant v = new Variant();
        query.first();
        while (!query.eof()) {
          if (!field.getValue().isNull() && (field.getValue().compareTo(v) < 0 || v.isNullValue())) {
            v.setVariant(field.getValue());
          }
          query.next();
        }
        copyToClipboard(v.toString());
        java.awt.EventQueue.invokeLater(new Runnable() {
          public void run() {
            MessageBox.show(stringManager.getString("result"), String.format(stringManager.getString("min-result"), new Object[] {v.toString()}));
          }
        });
      } catch (Exception ex) {
        ExceptionUtil.processException(ex);
      }
    }//GEN-LAST:event_cmMinActionPerformed

    private void cmMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmMaxActionPerformed
      try {
        final Variant v = new Variant();
        query.first();
        while (!query.eof()) {
          if (!field.getValue().isNull() && (field.getValue().compareTo(v) > 0 || v.isNullValue())) {
            v.setVariant(field.getValue());
          }
          query.next();
        }
        copyToClipboard(v.toString());
        java.awt.EventQueue.invokeLater(new Runnable() {
          public void run() {
            MessageBox.show(stringManager.getString("result"), String.format(stringManager.getString("max-result"), new Object[] {v.toString()}));
          }
        });
      } catch (Exception ex) {
        ExceptionUtil.processException(ex);
      }
    }//GEN-LAST:event_cmMaxActionPerformed

    private void cmConcatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmConcatActionPerformed
      try {
        final StringBuffer sb = new StringBuffer();
        query.first();
        while (!query.eof()) {
          if (!field.getValue().isNull()) {
            sb.append(field.getString());
          }
          query.next();
        }
        copyToClipboard(sb.toString());
        java.awt.EventQueue.invokeLater(new Runnable() {
          public void run() {
            MessageBox.show(stringManager.getString("result"), stringManager.getString("concat-result"));
          }
        });
      } catch (Exception ex) {
        ExceptionUtil.processException(ex);
      }
    }//GEN-LAST:event_cmConcatActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private pl.mpak.sky.gui.swing.Action cmAvg;
  private pl.mpak.sky.gui.swing.Action cmConcat;
  private pl.mpak.sky.gui.swing.Action cmMax;
  private pl.mpak.sky.gui.swing.Action cmMin;
  private pl.mpak.sky.gui.swing.Action cmSum;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JList listSelect;
  // End of variables declaration//GEN-END:variables

}
